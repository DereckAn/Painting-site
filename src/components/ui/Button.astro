---
/**
 * Button Component
 * Componente de botón reutilizable con variantes y tamaños
 */

import type { ButtonVariant, ButtonSize } from '@/types';

interface Props {
  variant?: ButtonVariant;
  size?: ButtonSize;
  fullWidth?: boolean;
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  class?: string;
}

const {
  variant = 'primary',
  size = 'md',
  fullWidth = false,
  href,
  type = 'button',
  disabled = false,
  class: className = '',
} = Astro.props;

// Estilos base
const baseStyles = 'inline-flex items-center justify-center gap-2 font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

// Variantes de estilo
const variantStyles: Record<ButtonVariant, string> = {
  primary: 'bg-black text-white hover:bg-white hover:text-black focus:ring-gray-900 border-2 border-black font-anton rotate-3',
  secondary: 'bg-gray-700 text-white hover:bg-gray-800 focus:ring-gray-700 border-2 border-gray-700',
  outline: 'bg-transparent text-black border-2 border-black hover:bg-black hover:text-white focus:ring-black',
  ghost: 'bg-transparent text-black hover:bg-gray-100 focus:ring-gray-400',
  normal: "bg-transparent text-white font-anton"
};

// Tamaños
const sizeStyles: Record<ButtonSize, string> = {
  sm: 'px-4 py-2 text-sm',
  md: 'px-6 py-3 text-base ',
  lg: 'px-8 py-4 text-lg ',
};

const widthStyle = fullWidth ? 'w-full' : '';

const classes = `${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${widthStyle} ${className}`.trim();

const Element = href ? 'a' : 'button';
---

<Element
  class={classes}
  href={href}
  type={!href ? type : undefined}
  disabled={disabled}
  {...Astro.props}
>
  <slot />
</Element>
